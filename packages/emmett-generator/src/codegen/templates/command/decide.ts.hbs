import { IllegalStateError } from '@event-driven-io/emmett';
import type { State } from './state';
import type { {{pascalCase firstCommand.type}} } from './commands';
{{#if firstEvent}}
    import type { {{pascalCase firstEvent.type}} } from './events';
{{/if}}

export const decide = (
command: {{pascalCase firstCommand.type}},
state: State,
){{#if firstEvent}}: {{pascalCase firstEvent.type}}{{/if}} => {
if (command.type !== '{{firstCommand.type}}') {
throw new IllegalStateError(`Unexpected command type: ${command.type}`);
}

// TODO: Add domain rules to validate command against state before emitting event

{{#if firstEvent}}
    return {
    type: '{{firstEvent.type}}',
    data: {
    ...command.data,
    },
    };
{{else}}
    throw new IllegalStateError('No events defined for this slice.');
{{/if}}
};