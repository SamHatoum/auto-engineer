import { CommandHandler, type EventStore } from '@event-driven-io/emmett';
import { evolve } from './evolve';
import { initialState } from './state';
import { decide } from './decide';
import type { <%= commands.map(c => pascalCase(c.type)).join(' | ') %> } from './commands';
import type { HandlerResult } from '../../../shared';

const commandHandler = CommandHandler({
evolve,
initialState,
});

export const handle = async (
eventStore: EventStore,
command: <%= commands.map(c => pascalCase(c.type)).join(' | ') %>
): Promise<HandlerResult> => {
    <% const streamTemplate = slice.stream ?? `${toKebabCase(slice.name)}-\${id}`; %>
    <% if (streamTemplate.includes('${')) { -%>
        const streamId = `<%= streamTemplate.replace(/\$\{([^}]+)\}/g, (_, key) => `\${command.data.${key}}`) %>`;
    <% } else { -%>
        const streamId = '<%= streamTemplate %>';
    <% } -%>

    try {
    await commandHandler(eventStore, streamId, (state) => decide(command, state));
    return { success: true };
    } catch (error: any) {
    return {
    success: false,
    error: {
    type: error?.name ?? 'UnknownError',
    message: error?.message ?? 'An unexpected error occurred',
    },
    };
    }
    };