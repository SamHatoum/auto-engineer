import { Mutation, Resolver, Arg, Ctx } from 'type-graphql';
import { handle } from './handle';
import { GraphQLContext, MutationResponse, toMutationResponse } from '../../../shared';
import { Field, InputType } from 'type-graphql';

@InputType()
export class <%= pascalCase(commands[0].type) %>Input {
<% for (const field of commands[0].fields) { -%>
    @Field(() => <%= graphqlType(field.tsType) %>)
    <%= field.name %><%= field.required === false ? '?' : '!' %>: <%= field.tsType %>;
<% } -%>
}

@Resolver()
export class <%= pascalCase(commands[0].type) %>Resolver {
@Mutation(() => MutationResponse)
async <%= camelCase(commands[0].type) %>(
@Arg('input', () => <%= pascalCase(commands[0].type) %>Input) input: <%= pascalCase(commands[0].type) %>Input,
@Ctx() ctx: GraphQLContext
): Promise<MutationResponse> {
    const result = await handle(ctx.eventStore, {
    type: '<%= commands[0].type %>',
    data: input,
    });
    return toMutationResponse(result);
    }
    }
