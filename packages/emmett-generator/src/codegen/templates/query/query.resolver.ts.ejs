<%
const target = slice?.server?.data?.[0]?.target;
const projection = slice?.server?.data?.[0]?.origin;
const queryName = parsedRequest?.queryName ?? camelCase(sliceName);
const viewType = target?.name ? pascalCase(target.name) : 'UnknownView';
const projectionType = projection?.name ? pascalCase(projection.name) : 'UnknownProjection';
const message = messages?.find(m => m.name === viewType);
const resolverClassName = `${pascalCase(slice.name)}QueryResolver`;

const usesID = parsedRequest?.args?.some(arg => graphqlType(arg.tsType) === 'ID');
%>
import { Query, Resolver, Arg, Ctx, ObjectType, Field<% if (usesID) { %>, ID<% } %> } from 'type-graphql';
import { type GraphQLContext, ReadModel } from '../../../shared';

@ObjectType()
export class <%= viewType %> {
<% if (message?.fields?.length) {
        for (const field of message.fields) {
    const gqlType = graphqlType(field.type ?? 'string');
    const tsType = field.type ?? 'string';
%>
@Field(() => <%= gqlType %>)
<%= field.name %>!: <%- tsType %>;
<%   } %>
[key: string]: unknown;
<% } else { %>
    [key: string]: unknown;
<% } %>
}

@Resolver()
export class <%= resolverClassName %> {
@Query(() => [<%= viewType %>])
async <%= queryName %>(
@Ctx() ctx: GraphQLContext<% if (parsedRequest?.args?.length) { %>,
<%     for (let i = 0; i < parsedRequest.args.length; i++) {
    const arg = parsedRequest.args[i];
    const gqlType = graphqlType(arg.tsType);
    const tsType = arg.tsType === 'ID' ? 'string' : arg.tsType;
%>    @Arg('<%= arg.name %>', () => <%= gqlType %>, { nullable: true }) <%= arg.name %>?: <%- tsType %><%= i < parsedRequest.args.length - 1 ? ',' : '' %>
<%     }
} %>
): Promise<<%= viewType %>[]> {
const model = new ReadModel<<%= viewType %>>(ctx.eventStore, '<%= projectionType %>');

// ## IMPLEMENTATION INSTRUCTIONS ##
// You can query the projection using the ReadModel API:
//
// - model.getAll() — fetch all documents
// - model.getById(id) — fetch a single document by ID (default key: 'id')
// - model.find(filterFn) — filter documents using a predicate
// - model.first(filterFn) — fetch the first document matching a predicate
//
// Example below uses `.find()` to filter
// change the logic for the query as needed to meet the requirements for the current slice.

return model.find((item) => {
<% if (parsedRequest?.args?.length) {
        for (const arg of parsedRequest.args) { %>
    if (<%= arg.name %> !== undefined && item.<%= arg.name %> !== <%= arg.name %>) return false;
<%  }
} %>
return true;
});
}
}