import {
inMemorySingleStreamProjection,
type ReadEvent,
type InMemoryReadEventMetadata,
} from '@event-driven-io/emmett';
import type { <%= pascalCase(slice.server?.data?.[0]?.target?.name || 'UnknownState') %> } from './state';<%
if (events.length > 0) {
    const importGroups = new Map();
    for (const event of events) {
        const fromSameFlow = event.sourceFlowName === flowName;
        const basePath = fromSameFlow
                ? `../${toKebabCase(event.sourceSliceName ?? 'unknown')}/events`
                : `../${toKebabCase(event.sourceFlowName ?? 'unknown')}/${toKebabCase(event.sourceSliceName ?? 'unknown')}/events`;

        if (!importGroups.has(basePath)) {
            importGroups.set(basePath, []);
        }
        importGroups.get(basePath).push(event.type);
    }

        for (const [importPath, typeNames] of importGroups.entries()) {
%>
    import type { <%= typeNames.join(', ') %> } from '<%= importPath %>';
<%
}
} -%>

type AllEvents = <%= events.length > 0 ? events.map(e => e.type).join(' | ') : 'never' %>;

export const projection = inMemorySingleStreamProjection<
<%= pascalCase(slice.server?.data?.[0]?.target?.name || 'UnknownState') %>,
AllEvents
>({
collectionName: '<%= toKebabCase(slice.server?.data?.[0]?.origin?.name || "unknown-collection") %>',
canHandle: [<%- events.map(e => `'${e.type}'`).join(', ') %>],
getDocumentId: (event) => event.data.<%= slice.server?.data?.[0]?.origin?.idField ?? 'id' %>,
evolve: (
document: <%= pascalCase(slice.server?.data?.[0]?.target?.name || 'UnknownState') %> | null,
event: ReadEvent<AllEvents, InMemoryReadEventMetadata>
): <%= pascalCase(slice.server?.data?.[0]?.target?.name || 'UnknownState') %> | null => {
switch (event.type) {
<% for (const event of events) {
    const targetName = slice.server?.data?.[0]?.target?.name;
    const queryGwt = slice.type === 'query'
            ? queryGwtMapping.find(gwt =>
                    gwt.given.some(g => g.eventRef === event.type)
            )
            : undefined;
    const example = slice.type === 'query'
            ? queryGwt?.then.find(t => t.stateRef === targetName)?.exampleData
            : gwtMapping[event.type]?.[0]?.then?.[0]?.exampleData;
    const targetFields = slice.server?.data?.[0]?.target?.fields;
    let usedFields = [];
    let isRemovalEvent = false;
    if (typeof example !== 'undefined') {
        if (example && Object.keys(example).length > 0) {
            usedFields = Object.keys(example);
        } else {
            isRemovalEvent = true;
        }
    } else if (targetFields) {
        usedFields = Object.keys(targetFields);
    }
    const eventNameSuggestsRemoval = event.type.toLowerCase().includes('remove') ||
            event.type.toLowerCase().includes('delete');
%>
case '<%= event.type %>': {
/**
* ## IMPLEMENTATION INSTRUCTIONS ##
<% if (isRemovalEvent || eventNameSuggestsRemoval) { -%>
    * This event might indicate removal of a <%= targetName || 'document' %>.
    *
    * - If the intent is to **remove the document**, return `null`.
    * - If the intent is to **soft delete**, consider adding a `status` field (e.g., `status: 'removed'`).
    * - Ensure consumers of this projection (e.g., UI) handle the chosen approach appropriately.
<% } else { -%>
    * This event adds or updates the document.
    * Review and adjust the fields as needed for your read model.
<% } -%>
*/
<% if (isRemovalEvent) { -%>
    return null;
<% } else if (usedFields.length === 0) { -%>
    // No fields specified - returning null
    return null;
<% } else { -%>
    return {
    <% for (let i = 0; i < usedFields.length; i++) {
        const field = usedFields[i];
        const isLast = i === usedFields.length - 1;
    %>          <%= field %>: event.data.<%= field %><%= isLast ? '' : ',' %>
    <% } -%>
    };
<% } -%>
}
<% } -%>
default:
return document;
}
},
});

export default projection;