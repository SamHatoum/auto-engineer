import { Mutation, Resolver, Arg, Ctx, Field, InputType } from 'type-graphql';
import { handle } from './handle';
import { GraphQLContext, MutationResponse, toMutationResponse } from '../../../shared';

@InputType()
export class CreateItemInput {
    @Field(() => String)
    itemId!: string;
    @Field(() => String)
    description!: string;
}

@Resolver()
export class CreateItemResolver {
@Mutation(() => MutationResponse)
async createItem(
@Arg('input', () => CreateItemInput) input: CreateItemInput,
@Ctx() ctx: GraphQLContext
): Promise<MutationResponse> {
    const result = await handle(ctx.eventStore, {
    type: 'CreateItem',
    data: input,
    });
    return toMutationResponse(result);
    }
    }