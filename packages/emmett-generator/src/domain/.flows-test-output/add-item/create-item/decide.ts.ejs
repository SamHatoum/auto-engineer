import {
IllegalStateError
} from '@event-driven-io/emmett';
import type { State } from './state';
import type { CreateItem } from './commands';
    import type { ItemCreated } from './events';

export const decide = (
command: CreateItem,
state: State
): ItemCreated => {
switch (command.type) {
case 'CreateItem': {
/**
* ## IMPLEMENTATION INSTRUCTIONS ##
*
* This command can directly emit one or more events based on the input.
*
* You should:
* - Validate the command input fields
* - Inspect the current domain `state` to determine if the command is allowed
* - If invalid, throw one of the following domain errors `NotFoundError`, `ValidationError` or `IllegalStateError`
* - If valid, return one or more events with the correct structure
*
* ⚠️ Only read from `state` — never mutate it. The `evolve.ts` file is responsible for updating state.
*/

// return {
//   type: 'ItemCreated',
//   data: { ...command.data },
// } as ItemCreated;

throw new IllegalStateError('Not yet implemented: ' + command.type);
}
default:
throw new IllegalStateError('Unexpected command type: ' + command.type);
}
};