import {Command, Event, on, dispatch, fold} from '@auto-engineer/message-bus';

// -----
// all these commands and events will be imported from the right packages, this is just a placeholder

export type CreateFlow = Command<
  'CreateFlow',
  {
    path: string;
    name: string;
    schema: string;
  }
>;

export type GenerateBackend = Command<
  'GenerateBackend',
  {
    path: string;
    name: string;
    schema: string;
  }
>;

export type ImplementBackend = Command<
  'ImplementBackend',
  {
    path: string;
    name: string;
    schema: string;
  }
>;

export type RunBackendChecks = Command<
  'RunBackendChecks',
  {
    path: string;
    name: string;
    schema: string;
  }
>;

export type DeployBackend = Command<
  'DeployBackend',
  {
    path: string;
    name: string;
    schema: string;
  }
>;

export type CreateInformationArchitecture = Command<
  'CreateInformationArchitecture',
  {
    path: string;
    name: string;
    schema: string;
  }
>;

export type FlowCreated = Event<
  'FlowCreated',
  {
    path: string;
    name: string;
    schema: string;
  }
>;

export type BackendGenerated = Event<
  'BackendGenerated',
  {
    path: string;
    name: string;
    schema: string;
  }
>;

export type BackendImplemented = Event<
  'BackendImplemented',
  {
    path: string;
    name: string;
    schema: string;
  }
>;

export type BackendChecksPassed = Event<
  'BackendChecksPassed',
  {
    path: string;
    name: string;
    schema: string;
  }
>;

export type BackendChecksFailed = Event<
  'BackendChecksFailed',
  {
    path: string;
    name: string;
    schema: string;
    failure: 'static-error' | 'runtime-error' | 'data-error';
  }
>;

export type BackendDeployed = Event<
  'BackendDeployed',
  {
    path: string;
    name: string;
    schema: string;
  }
>;

export type InformationArchitectureCreated = Event<
  'InformationArchitectureCreated',
  {
    path: string;
    name: string;
    schema: string;
  }
>;

// -----
// actual config file

const state = {
  backend: '',
  appStatus: fold<BackendChecksFailed | BackendChecksPassed | BackendGenerated | BackendImplemented | BackendDeployed>(
    (e) => {
      switch (e.type) {
        case 'BackendChecksFailed':
          return 'failed';
        case 'BackendChecksPassed':
          return 'passed';
        case 'BackendGenerated':
          return 'generated';
        case 'BackendImplemented':
          return 'implemented';
        case 'BackendDeployed':
          return 'deployed';
        default:
          return 'unknown';
      }
    },
  ),
};

on((flowCreated: FlowCreated) =>
  dispatch<GenerateBackend>({
    type: 'GenerateBackend',
    data: {
      path: flowCreated.data.path,
      name: flowCreated.data.name,
      schema: flowCreated.data.schema,
    },
  }),
);

on((backendGenerated: BackendGenerated) =>
  dispatch.parallel<ImplementBackend | CreateInformationArchitecture>([
    {
      type: 'ImplementBackend',
      data: {
        path: backendGenerated.data.path,
        name: backendGenerated.data.name,
        schema: backendGenerated.data.schema,
      },
    },
    {
      type: 'CreateInformationArchitecture',
      data: {
        path: backendGenerated.data.path,
        name: backendGenerated.data.name,
        schema: backendGenerated.data.schema,
      },
    },
  ]),
);

on((backendImplemented: BackendImplemented) =>
  dispatch<RunBackendChecks>({
    type: 'RunBackendChecks',
    data: {
      path: backendImplemented.data.path,
      name: backendImplemented.data.name,
      schema: backendImplemented.data.schema,
    },
  }),
);

on((backendChecksPassed: BackendChecksPassed) =>
  dispatch<DeployBackend>({
    type: 'DeployBackend',
    data: {
      path: backendChecksPassed.data.path,
      name: backendChecksPassed.data.name,
      schema: backendChecksPassed.data.schema,
    },
  }),
);

on((backendChecksFailed: BackendChecksFailed) =>
  dispatch.custom<ImplementBackend | CreateFlow>(() => {
    const failure = backendChecksFailed.data.failure;
    switch (failure) {
      case 'static-error':
        return {
          type: 'ImplementBackend',
          data: {
            path: backendChecksFailed.data.path,
            name: backendChecksFailed.data.name,
            schema: backendChecksFailed.data.schema,
          },
        };
      case 'runtime-error':
        return {
          type: 'ImplementBackend',
          data: {
            path: backendChecksFailed.data.path,
            name: backendChecksFailed.data.name,
            schema: backendChecksFailed.data.schema,
          },
        };
      case 'data-error':
        return {
          type: 'CreateFlow',
          data: {
            path: backendChecksFailed.data.path,
            name: backendChecksFailed.data.name,
            schema: backendChecksFailed.data.schema,
          },
        };
    }
  }),
);