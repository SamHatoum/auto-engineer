<%
const target = slice?.server?.data?.[0]?.target;
const projection = slice?.server?.data?.[0]?.origin;
const queryName = parsedRequest?.queryName ?? camelCase(sliceName);
const viewType = target?.name ? pascalCase(target.name) : 'UnknownView';
const projectionType = projection?.name ? pascalCase(projection.name) : 'UnknownProjection';
const message = messages?.find(m => m.name === viewType);
const resolverClassName = `${pascalCase(slice.name)}QueryResolver`;
const usesID = parsedRequest?.args?.some(arg => graphqlType(arg.tsType) === 'ID');

function isInlineObject(ts) {
    return /^\{[\s\S]*\}$/.test((ts ?? '').trim());
}
function isInlineObjectArray(ts) {
    const t = (ts ?? '').trim();
    return /^Array<\{[\s\S]*\}>$/.test(t) || /^\{[\s\S]*\}\[\]$/.test(t);
}
function baseTs(ts) {
    return (ts ?? 'string').replace(/\s*\|\s*null\b/g, '').trim();
}
function fieldUsesDate(ts) {
    const b = baseTs(ts);
    const gqlType = graphqlType(b);
    if (gqlType.includes('GraphQLISODateTime')) return true;
    if (isInlineObject(b) || isInlineObjectArray(b)) return /:\s*Date\b/.test(b);
    return false;
}
function fieldUsesJSON(ts) {
    const b = baseTs(ts);
    const gqlType = graphqlType(b);
    if (gqlType.includes('GraphQLJSON') || gqlType.includes('JSON')) return true;
    if (isInlineObject(b) || isInlineObjectArray(b)) return /:\s*(unknown|any|object)\b/.test(b);
    return false;
}
function fieldUsesFloat(ts) {
    const b = baseTs(ts);
    const gqlType = graphqlType(b);
    if (gqlType.includes('Float')) return true;
    if (isInlineObject(b) || isInlineObjectArray(b)) {
        const inner = b.trim().startsWith('Array<')
            ? b.trim().replace(/^Array<\{/, '{').replace(/}>$/, '}')
            : b.trim().replace(/\[\]$/, '');
        const match = inner.match(/^\{([\s\S]*)\}$/);
        const body = match ? match[1] : '';
        const rawFields = body.split(/[,;]\s*/).filter(Boolean);
        return rawFields.some(f => {
            const parts = f.split(':');
            const type = parts.slice(1).join(':').trim();
            return type && graphqlType(type).includes('Float');
        });
    }
    return false;
}

const messageFields = message?.fields ?? [];
const usesDate = messageFields.some(f => fieldUsesDate(f.type)) ||
        (parsedRequest?.args ?? []).some(a => fieldUsesDate(a.tsType));
const usesJSON = messageFields.some(f => fieldUsesJSON(f.type)) ||
        (parsedRequest?.args ?? []).some(a => fieldUsesJSON(a.tsType));
const usesFloat = messageFields.some(f => fieldUsesFloat(f.type)) ||
        (parsedRequest?.args ?? []).some(a => fieldUsesFloat(a.tsType));

const embeddedTypes = [];
for (const field of messageFields) {
    const tsType = field.type ?? 'string';
    if (isInlineObjectArray(tsType) || isInlineObject(tsType)) {
        embeddedTypes.push({
            typeName: `${viewType}${pascalCase(field.name)}`,
            tsType,
        });
    }
}
%>
import { Query, Resolver, Arg, Ctx, ObjectType, Field<% if (usesID) { %>, ID<% } %><% if (usesFloat) { %>, Float<% } %><% if (usesDate) { %>, GraphQLISODateTime<% } %> } from 'type-graphql';
<% if (usesJSON) { %>import { GraphQLJSON } from 'graphql-type-json';
<% } %>import { type GraphQLContext, ReadModel } from '../../../shared';

<%
        for (const { typeName, tsType } of embeddedTypes) {
    const inner = tsType.trim().startsWith('Array<')
            ? tsType.trim().replace(/^Array<\{/, '{').replace(/}>$/, '}')
            : tsType.trim().replace(/\[\]$/, '');
    const match = inner.match(/^\{([\s\S]*)\}$/);
    const body = match ? match[1] : '';
    const rawFields = body.split(/[,;]\s*/).filter(Boolean);
    const parsedFields = rawFields.map(f => {
        const parts = f.split(':');
        const name = parts[0]?.trim();
        const type = parts.slice(1).join(':').trim();
        if (!name || !type) return null;
        return { name, tsType: type, gqlType: graphqlType(type), nullable: isNullable(type) };
    }).filter(Boolean);
%>
@ObjectType()
export class <%= typeName %> {
<% for (const f of parsedFields) { %>
    @Field(() => <%= f.gqlType %><%= f.nullable ? ', { nullable: true }' : '' %>)
    <%= f.name %><%= f.nullable ? '?' : '!' %>: <%= toTsFieldType(f.tsType) %>;
<% } %>
}
<% } %>

@ObjectType()
export class <%= viewType %> {
<% if (messageFields.length) {
        for (const field of messageFields) {
    const tsType = field.type ?? 'string';
    const gqlType = graphqlType(tsType);
    const typeName = `${viewType}${pascalCase(field.name)}`;
%>
<% if (isInlineObjectArray(tsType)) { %>
    @Field(() => [<%= typeName %>])
    <%= field.name %>!: <%= typeName %>[];
<% } else if (isInlineObject(tsType)) { %>
    @Field(() => <%= typeName %>)
    <%= field.name %>!: <%= typeName %>;
<% } else { %>
    @Field(() => <%= gqlType %><%= isNullable(tsType) ? ', { nullable: true }' : '' %>)
    <%= field.name %><%= isNullable(tsType) ? '?' : '!' %>: <%= toTsFieldType(tsType) %>;
<% } } %>
[key: string]: unknown;
<% } else { %>
    [key: string]: unknown;
<% } %>
}

@Resolver()
export class <%= resolverClassName %> {
@Query(() => [<%= viewType %>])
async <%= queryName %>(
@Ctx() ctx: GraphQLContext<% if (parsedRequest?.args?.length) { %>,
<%   for (let i = 0; i < parsedRequest.args.length; i++) {
    const arg = parsedRequest.args[i];
    const gqlType = graphqlType(arg.tsType);
    const tsType = arg.tsType === 'ID' ? 'string' : arg.tsType;
%>    @Arg('<%= arg.name %>', () => <%= gqlType %>, { nullable: true }) <%= arg.name %>?: <%= tsType %><%= i < parsedRequest.args.length - 1 ? ',' : '' %>
<%   } } %>
): Promise<<%= viewType %>[]> {
const model = new ReadModel<<%= viewType %>>(ctx.eventStore, '<%= projectionType %>');

// ## IMPLEMENTATION INSTRUCTIONS ##
// You can query the projection using the ReadModel API:
// - model.getAll() — fetch all documents
// - model.getById(id) — fetch a single document by ID (default key: 'id')
// - model.find(filterFn) — filter documents using a predicate
// - model.first(filterFn) — fetch the first document matching a predicate
//
// Example below uses \`.find()\` to filter
// change the logic for the query as needed to meet the requirements for the current slice.

return model.find((item) => {
<% if (parsedRequest?.args?.length) {
        for (const arg of parsedRequest.args) { %>
    if (<%= arg.name %> !== undefined && item.<%= arg.name %> !== <%= arg.name %>) return false;
<% } } %>
return true;
});
}
}