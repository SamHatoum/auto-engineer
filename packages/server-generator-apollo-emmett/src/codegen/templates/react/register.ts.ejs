<%
const specs = slice.server?.specs;
const firstExample = specs?.rules?.flatMap(rule => rule.examples)[0] ?? null;
const gwt = firstExample ? {
  given: firstExample.given,
  when: firstExample.when,
  then: firstExample.then
} : null;
const when = Array.isArray(gwt?.when) ? gwt.when[0] : gwt?.when;
const then = Array.isArray(gwt?.then) ? gwt.then[0] : gwt?.then;

const eventType = when?.eventRef;
const commandType = then?.commandRef;
const event = events.find(e => e.type === eventType);
%>
import { type CommandSender, type EventSubscription, type EventStore } from '@event-driven-io/emmett';
import type { <%= pascalCase(eventType) %> } from '../<%= toKebabCase(event?.sourceSliceName ?? 'unknown') %>/events';

export async function register(
messageBus: CommandSender & EventSubscription,
eventStore: EventStore
) {
messageBus.subscribe(
async (event: <%= pascalCase(eventType) %>) => {
/**
* ## IMPLEMENTATION INSTRUCTIONS ##
*
* - Replace the placeholder logic with the  real implementation.
* - Send one or more commands via: messageBus.send({...})
*/

// await messageBus.send({
//   type: '<%= commandType %>',
//   kind: 'Command',
//   data: {
//     // Map event fields to command fields here
//     // e.g., userId: event.data.userId,
//   },
// });

return;
},
'<%= eventType %>'
);
}