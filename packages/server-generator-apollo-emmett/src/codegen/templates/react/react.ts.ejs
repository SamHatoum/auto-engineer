<%
// Extract the first example from specs/rules structure
const specs = slice.server?.specs;
const firstExample = specs?.rules?.flatMap(rule => rule.examples)[0] ?? null;
const gwt = firstExample ? {
  given: firstExample.given,
  when: firstExample.when,
  then: firstExample.then
} : null;
const when = Array.isArray(gwt?.when) ? gwt.when[0] : gwt?.when;
const then = Array.isArray(gwt?.then) ? gwt.then[0] : gwt?.then;

const eventType = when?.eventRef;
const commandType = then?.commandRef;
const event = events.find(e => e.type === eventType);
-%>
import {
inMemoryReactor,
type MessageHandlerResult,
IllegalStateError,
} from '@event-driven-io/emmett';
import type { <%= pascalCase(eventType) %> } from '../<%= toKebabCase(event?.sourceSliceName ?? 'unknown') %>/events';
import type { ReactorContext } from '../../../shared';

export const react = ({ eventStore, commandSender, database }: ReactorContext) =>
inMemoryReactor<<%= pascalCase(eventType) %>>({
processorId: '<%= toKebabCase(flowName) %>-<%= toKebabCase(slice.name) %>',
canHandle: ['<%= eventType %>'],
connectionOptions: {
database,
},
eachMessage: async (event, context): Promise<MessageHandlerResult> => {
    /**
    * ## IMPLEMENTATION INSTRUCTIONS ##
    *
    * - Inspect event data to determine if the command should be sent.
    * - Replace the placeholder logic and \`throw\` below with real implementation.
    * - Send one or more commands via: commandSender.send({...})
    * - Optionally return a MessageHandlerResult for SKIP or error cases.
    */

    throw new IllegalStateError('Not yet implemented: react in response to <%= eventType %>');

    // Example:
    // if (event.data.status !== 'expected') {
    //   return {
    //     type: 'SKIP',
    //     reason: 'Condition not met',
    //   };
    // }

    // await commandSender.send({
    //   type: '<%= commandType %>',
    //   kind: 'Command',
    //   data: {
    //     // Map event fields to command fields here
    //     // e.g., userId: event.data.userId,
    //   },
    // });

    // return;
    },
    });