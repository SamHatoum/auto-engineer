import { Mutation, Resolver, Arg, Ctx, Field, InputType, GraphQLISODateTime } from 'type-graphql';
import GraphQLJSON from 'graphql-type-json';
import { type GraphQLContext, sendCommand, MutationResponse } from '../../../shared';

@InputType()
export class <%= pascalCase(commands[0].type) %>Input {
<% for (const field of commands[0].fields) { -%>
    @Field(
    () => <%= graphqlType(field.tsType) %><%= (field.required === false || isNullable(field.tsType)) ? ', { nullable: true }' : '' %>
    )
    <%= field.name %><%= field.required === false ? '?' : '' %><%= field.required !== false ? '!' : '' %>: <%- field.tsType %>;
<% } -%>
}

@Resolver()
export class <%= pascalCase(commands[0].type) %>Resolver {
@Mutation(() => MutationResponse)
async <%= camelCase(commands[0].type) %>(
@Arg('input', () => <%= pascalCase(commands[0].type) %>Input) input: <%= pascalCase(commands[0].type) %>Input,
@Ctx() ctx: GraphQLContext
): Promise<MutationResponse> {
    return await sendCommand(ctx.messageBus, {
    type: '<%= commands[0].type %>',
    kind: 'Command',
    data: { ...input },
    });
    }
    }