import {
IllegalStateError<% if (usedErrors.includes('ValidationError')) { %>, ValidationError<% } %><% if (usedErrors.includes('NotFoundError')) { %>, NotFoundError<% } %>
} from '@event-driven-io/emmett';
import type { State } from './state';
import type { <%= Object.keys(gwtMapping).map(pascalCase).join(', ') %> } from './commands';
<%
const fallbackEvents = Object.values(gwtMapping).flatMap(scenarios =>
        scenarios.flatMap(s => s.then?.filter(t => 'eventRef' in t) || [])
);
const uniqueEventTypes = [...new Set(fallbackEvents.map(e => pascalCase(e.eventRef)))];

const integrationData = (slice.server?.data ?? []).filter(d => d.destination?.type === 'integration');
const integration = integrationData[0];
const integrationReturnType = integration?._withState?.target?.name;
const integrationReturnSystem = integration?._withState?.origin?.systems?.[0];
const integrationReturnImportSource = integrations?.find(i => i.name === integrationReturnSystem)?.source;
const integrationReturnFields = messages?.find(m => m.name === integrationReturnType && m.type === 'state')?.fields ?? [];

function formatFieldDocLine(field) {
    const optional = field.required ? '' : '?';
    const name = `${field.name}${optional}`;
    const type = field.type;

    if (type.startsWith('Array<{') && type.endsWith('}>')) {
        const inner = type.slice(7, -1);
        const entries = inner
                .split(',')
                .map(s => s.trim())
                .map(pair => {
                    const [k, v] = pair.split(':').map(p => p.trim());
                    return `*     ${k}: ${v};`;
                });
        return [`*   ${name}: Array<{`, ...entries, `*   }>;`];
    }

    return [`*   ${name}: ${type};`];
}
-%>
<% if (uniqueEventTypes.length > 0) { -%>
    import type { <%= uniqueEventTypes.join(', ') %> } from './events';
<% } -%>
<% if (integrationReturnType && integrationReturnImportSource) { -%>
    import type { <%= integrationReturnType %> } from '<%= integrationReturnImportSource %>';
<% } -%>

export const decide = (
command: <%= Object.keys(gwtMapping).map(pascalCase).join(' | ') %>,
_state: State<%= integrationReturnType ? `,\n  ${camelCase(integrationReturnType)}?: ${integrationReturnType}` : '' %>
): <%= uniqueEventTypes.length === 0
        ? 'never'
        : uniqueEventTypes.length === 1
                ? uniqueEventTypes[0]
                : `(${uniqueEventTypes.join(' | ')}) | (${uniqueEventTypes.join(' | ')})[]` %> => {
switch (command.type) {
<% for (const command of Object.keys(gwtMapping)) {
    const scenarios = gwtMapping?.[command] ?? [];
    const hasGivenEvents = scenarios.some(s => s.given?.length > 0);
    const fallbackEvents = scenarios.flatMap(s => s.then.filter(t => 'eventRef' in t));
    const fallbackEventTypes = [...new Set(fallbackEvents.map(e => e.eventRef))];
-%>
case '<%= command %>': {
/**
* ## IMPLEMENTATION INSTRUCTIONS ##
*
* This command <%= hasGivenEvents ? 'requires evaluating prior state to determine if it can proceed' : 'can directly emit one or more events based on the input' %>.
*
* You should:
* - Validate the command input fields
* - Inspect the current domain `state` to determine if the command is allowed
<% if (integrationReturnType) { -%>
    * - Use `<%= camelCase(integrationReturnType) %>` (integration result) to enrich or filter the output
<% } -%>
* - If invalid, throw one of the following domain errors: `NotFoundError`, `ValidationError`, or `IllegalStateError`
*   ⚠️ Error constructors: NotFoundError takes { id, type, message? }, while IllegalStateError/ValidationError take string
* - If valid, return one or more events with the correct structure
*
* ⚠️ Only read from inputs — never mutate them. `evolve.ts` handles state updates.
<% if (integrationReturnFields.length > 0) { -%>
    *
    * Integration result shape (<%= integrationReturnType %>):
    * <%= camelCase(integrationReturnType) %>?.data = {
    <%= integrationReturnFields.flatMap(formatFieldDocLine).join('\n') %>
    * }
<% } -%>
*/

<% for (const gwt of scenarios) {
    const error = gwt.then.find(t => 'errorType' in t);
if (error && gwt.failingFields?.length) {
    const condition = gwt.failingFields.map(field => `command.data.${field} === ''`).join(' || ');
-%>
if (<%- condition %>) {
throw new <%= error.errorType %>('<%- error.message ?? 'Validation failed' %>');
}
<% } } -%>

// return {
//   type: '<%= fallbackEventTypes[0] ?? 'TODO_EVENT_TYPE' %>',
//   data: { ...command.data },
// } as <%= fallbackEventTypes[0] ? pascalCase(fallbackEventTypes[0]) : 'TODO_EVENT_TYPE' %>;

throw new IllegalStateError('Not yet implemented: ' + command.type);
}
<% } -%>
default:
throw new IllegalStateError(`Unexpected command type: ${String(command.type)}`);
}
};