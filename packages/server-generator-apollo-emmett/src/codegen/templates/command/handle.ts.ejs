<%
const integrationData = (slice.server?.data ?? []).filter(d => d.destination?.type === 'integration');

const integrationImports = new Map();
const integrationSideEffectImports = new Set();

for (const d of integrationData) {
    for (const system of d.destination?.systems ?? []) {
        const integration = (integrations ?? []).find(i => i.name === system);
        if (integration) {
            integrationImports.set(system, integration.source);
        }
    }

    const returnType = d._withState?.target?.name;
    const returnSystem = d._withState?.origin?.systems?.[0];
    if (returnType && returnSystem) {
        const integration = (integrations ?? []).find(i => i.name === returnSystem);
        if (integration) {
            integrationImports.set(returnType, integration.source);
            integrationSideEffectImports.add(integration.source);
        }
    }
}

const additionalInstructions = (slice.server?.data ?? [])
        .map(d => d._additionalInstructions)
        .filter(Boolean);

const integrationCalls = integrationData.map((d, i) => {
    const system = d.destination.systems?.[0];
    const messageName = d.destination.message?.name;
    const returnType = d._withState?.target?.name;
    const varName = returnType ? camelCase(returnType) : `result${i + 1}`;

    const inputFields = messages.find(m => m.name === messageName && m.type === 'command')?.fields ?? [];
    const inputLines = inputFields.map(f => `    // ${f.name}: ???`);

    return {
        varName,
        call: `// TODO: Map fields from the incoming command to this integration input.
// - Use relevant fields from \`command.data\` to populate the required inputs below.
// - Some fields may require transformation or enrichment.
// - If additional context is needed, construct it here.
// const ${varName}${returnType ? `: ${returnType} | undefined` : ''} = await ${system}.Commands?.${messageName}${returnType ? `<${returnType}>` : ''}({
//   type: '${messageName}',
//   data: {
//${inputLines.join('\n')}
//   },
// });`,
    };
});

const resultVarName = integrationCalls.find(call => !!call.varName)?.varName;
const needsReturnValue = typeof resultVarName === 'string';
%>

<% integrationSideEffectImports.forEach((importSource) => { %>
    import '<%= importSource %>';
<% }); %>
<% integrationImports.forEach((importSource, importName) => { %>
    import { <%= importName %> } from '<%= importSource %>';
<% }); %>
import { CommandHandler, type EventStore, type MessageHandlerResult } from '@event-driven-io/emmett';
import { evolve } from './evolve';
import { initialState } from './state';
import { decide } from './decide';
import type { <%= commands.map(c => pascalCase(c.type)).join(', ') %> } from './commands';

<% if (additionalInstructions.length) { -%>
    /**
    * ## IMPLEMENTATION INSTRUCTIONS ##
    <% additionalInstructions.forEach(instr => { -%>
        * <%= instr %>
    <% }) -%>
    */
<% } -%>

const handler = CommandHandler({
evolve,
initialState,
});

export const handle = async (
eventStore: EventStore,
command: <%= commands.map(c => pascalCase(c.type)).join(' | ') %>
): Promise<MessageHandlerResult> => {
    <% if (stream?.pattern?.includes('${')) { -%>
        const streamId = `<%= stream.pattern.replace(/\$\{([^}]+)\}/g, (_, key) => `\${command.data.${key}}`) %>`;
    <% } else { -%>
        const streamId = '<%= stream?.pattern ?? 'unknown-stream' %>';
    <% } -%>

    try {
    <% integrationCalls.forEach(({ call }) => { -%>
        <%= call %>

    <% }) -%>
    await handler(eventStore, streamId, (state) =>
    <%- needsReturnValue
            ? `      // TODO: add ${resultVarName} as a parameter to decide once implemented above\n      decide(command, state, /* ${resultVarName} */)`
            : `      decide(command, state)` %>
    );
    return undefined; // success
    } catch (error: unknown) {
    return {
    type: 'SKIP',
    reason: `Command failed: ${error instanceof Error ? error.message : 'Unknown'}`,
    };
    }
    };