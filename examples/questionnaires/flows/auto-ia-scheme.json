{
  "schema_description": "Questionnaire application UI components and pages for participant questionnaire completion flow",
  "atoms": {
    "description": "Atomic UI primitives used in the questionnaire application",
    "items": {}
  },
  "molecules": {
    "description": "Reusable UI components composed from atoms",
    "items": {
      "HeroSection": {
        "description": "Hero section displaying welcome message and start questionnaire action",
        "composition": {
          "atoms": ["Card", "Button"]
        }
      },
      "ProgressIndicator": {
        "description": "Visual progress indicator showing questionnaire completion status",
        "composition": {
          "atoms": ["Progress"]
        }
      },
      "QuestionCard": {
        "description": "Individual question display with answer input",
        "composition": {
          "atoms": ["Card", "Button"]
        }
      },
      "AnsweredQuestionsList": {
        "description": "List displaying previously answered questions",
        "composition": {
          "atoms": ["Card"]
        }
      },
      "RemainingQuestionsList": {
        "description": "List showing remaining unanswered questions",
        "composition": {
          "atoms": ["Card"]
        }
      },
      "SubmissionConfirmation": {
        "description": "Confirmation message displayed after successful questionnaire submission",
        "composition": {
          "atoms": ["Alert", "Card"]
        }
      }
    }
  },
  "organisms": {
    "description": "Smart UI components with data-fetching and business logic",
    "items": {
      "QuestionnaireProgress": {
        "description": "Main questionnaire interface showing current progress and questions",
        "composition": {
          "molecules": ["ProgressIndicator", "QuestionCard", "AnsweredQuestionsList", "RemainingQuestionsList"]
        },
        "data_requirements": [
          {
            "type": "query",
            "description": "Fetch questionnaire progress and current state",
            "trigger": "On component mount and after answer submission",
            "details": {
              "source": "QuestionnaireProgress projection",
              "gql": "query QuestionnaireProgress($participantId: ID!) {\n        questionnaireProgress(participantId: $participantId) {\n          questionnaireId\n          participantId\n          currentQuestionId\n          remainingQuestions\n          status\n          answers {\n            questionId\n            value\n          }\n        }\n      }",
              "payload_schema": {
                "participantId": "ID!"
              }
            }
          },
          {
            "type": "mutation",
            "description": "Submit answer for current question",
            "trigger": "On answer submission",
            "details": {
              "source": "AnswerQuestion command",
              "gql": "mutation AnswerQuestion($input: AnswerQuestionInput!) {\n        answerQuestion(input: $input) {\n          success\n        }\n      }",
              "payload_schema": {
                "input": "AnswerQuestionInput!"
              }
            }
          }
        ],
        "specs": [
          "focus on the current question based on the progress state",
          "display the list of answered questions",
          "display the list of remaining questions",
          "show a progress indicator that is always visible as the user scrolls",
          "displays a success message when the answer is submitted",
          "display an error message when the answer submission is rejected"
        ]
      },
      "QuestionnaireSubmission": {
        "description": "Questionnaire submission interface with submit button and confirmation",
        "composition": {
          "molecules": ["SubmissionConfirmation"]
        },
        "data_requirements": [
          {
            "type": "query",
            "description": "Check if questionnaire is ready for submission",
            "trigger": "On component mount and after answers are updated",
            "details": {
              "source": "QuestionnaireProgress projection",
              "gql": "query QuestionnaireProgress($participantId: ID!) {\n        questionnaireProgress(participantId: $participantId) {\n          questionnaireId\n          participantId\n          status\n          currentQuestionId\n          remainingQuestions\n          answers {\n            questionId\n            value\n          }\n        }\n      }",
              "payload_schema": {
                "participantId": "ID!"
              }
            }
          },
          {
            "type": "mutation",
            "description": "Submit completed questionnaire",
            "trigger": "On submit button click",
            "details": {
              "source": "SubmitQuestionnaire command",
              "gql": "mutation SubmitQuestionnaire($input: SubmitQuestionnaireInput!) {\n        submitQuestionnaire(input: $input) {\n          success\n        }\n      }",
              "payload_schema": {
                "input": "SubmitQuestionnaireInput!"
              }
            }
          }
        ],
        "specs": [
          "enable the submit button when all questions are answered",
          "disable the submit button when all questions have not been answered",
          "display a confirmation message upon successful submission"
        ]
      }
    }
  },
  "pages": {
    "description": "Top-level application pages",
    "items": {
      "Homepage": {
        "route": "/",
        "description": "Landing page with hero section and questionnaire start option",
        "layout": {
          "organisms": []
        },
        "specs": ["show a hero section with a welcome message", "allow user to start the questionnaire"]
      },
      "QuestionnairePage": {
        "route": "/questionnaire",
        "description": "Main questionnaire page for answering questions and submitting",
        "layout": {
          "organisms": ["QuestionnaireProgress", "QuestionnaireSubmission"]
        }
      }
    }
  }
}
