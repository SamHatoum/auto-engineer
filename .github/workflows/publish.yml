name: Publish Packages

on:
  workflow_run:
    workflows: ['Build & Test']
    branches: [main]
    types:
      - completed

jobs:
  release:
    name: Release
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    # To use Turborepo Remote Caching, set the following environment variables for the job.
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@auto-engineer'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.4

      - name: Install Dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Update lockfile if needed
        run: |
          if ! git diff --exit-code pnpm-lock.yaml >/dev/null 2>&1; then
            echo "Lockfile was updated during install"
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add pnpm-lock.yaml
            git commit -m "chore(root): update lockfile"
          fi

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: pnpm release
          commit: 'chore(global): version packages'
          title: 'chore(global): version packages'
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get Published Packages
        if: success()
        id: get_packages
        run: |
          # Get packages that were published in this release
          PACKAGES=$(find .changeset -name "*.md" -type f -exec cat {} \; | grep -o '"@auto-engineer/[^"]*"' | sort -u | sed 's/"//g')
          echo "packages<<EOF" >> $GITHUB_OUTPUT
          echo "$PACKAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Configure Git
        if: success()
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Create Tags
        if: success()
        run: |
          COMMIT=$(git rev-parse HEAD)
          while IFS= read -r package; do
            if [[ $package == @auto-engineer/* ]]; then
              version=$(pnpm list $package --json | jq -r '.[0].version')
              tag="${package#@auto-engineer/}-v${version}"
              git tag -a "$tag" -m "Release $package@$version" $COMMIT
              git push origin "$tag"
            fi
          done <<< "${{ steps.get_packages.outputs.packages }}"
