name: Publish Packages

on:
  workflow_run:
    workflows: ['Build & Test']
    branches: [main]
    types:
      - completed

jobs:
  release:
    name: Release
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    # To use Turborepo Remote Caching, set the following environment variables for the job.
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@auto-engineer'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: Install Dependencies
        run: |
          pnpm install --no-frozen-lockfile
          pnpm build

      - name: Update lockfile if needed
        run: |
          if ! git diff --exit-code pnpm-lock.yaml >/dev/null 2>&1; then
            echo "Lockfile was updated during install"
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add pnpm-lock.yaml
            git commit -m "chore(root): update lockfile"
          fi

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: pnpm release
          commit: 'chore(global): version packages'
          title: 'chore(global): version packages'
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Print Published Packages
        if: steps.changesets.outputs.published == 'true'
        run: |
          echo "Packages published: ${{ steps.changesets.outputs.publishedPackages }}"

      - name: Get Published Packages for Tagging
        if: steps.changesets.outputs.published == 'true'
        id: get_packages
        run: |
          echo "Getting package information from publishedPackages output..."
          echo "${{ steps.changesets.outputs.publishedPackages }}" | jq -r '.[] | .name' > /tmp/packages.txt
          echo "packages<<EOF" >> $GITHUB_OUTPUT
          cat /tmp/packages.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Configure Git for Tagging
        if: steps.changesets.outputs.published == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Tags and Push
        if: steps.changesets.outputs.published == 'true'
        run: |
          COMMIT=$(git rev-parse HEAD)
          echo "Creating tags for commit: $COMMIT"

          # Parse the publishedPackages JSON to get name and version
          echo '${{ steps.changesets.outputs.publishedPackages }}' | jq -c '.[]' | while read -r package; do
            name=$(echo $package | jq -r '.name')
            version=$(echo $package | jq -r '.version')

            if [[ $name == @auto-engineer/* ]]; then
              # Create tag in format: package-name@version (e.g., @auto-engineer/flow@0.9.2)
              tag="${name}@${version}"
              echo "Creating tag: $tag"
              git tag -a "$tag" -m "Release $name@$version" $COMMIT
              git push origin "$tag"

              echo "✅ Created and pushed tag: $tag"
            else
              echo "⏭️  Skipping non-auto-engineer package: $name"
            fi
          done
